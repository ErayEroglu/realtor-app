import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit{
    async onModuleInit() {      
        await this.$connect();
    }
    async onModuleDestroy() {
        await this.$disconnect();
    }
}


// Here's a breakdown of the logic written by ChatGPT:

// @nestjs/common and @prisma/client are imported. The @nestjs/common package provides decorators and utility functions for creating NestJS applications, and @prisma/client is the client library generated by Prisma based on your data model.

// The PrismaService class is defined. This class extends the PrismaClient class, which is provided by the @prisma/client package. Extending PrismaClient allows you to use the generated Prisma client methods for querying and manipulating your database.

// The PrismaService class implements the OnModuleInit and OnModuleDestroy interfaces. These interfaces are part of the NestJS lifecycle events system and allow you to perform actions when a module is initialized or destroyed.

// The onModuleInit method is defined. This method is executed when the module containing the PrismaService is initialized. Inside this method, the this.$connect() method is called. This establishes a connection to the database using the Prisma client.

// The onModuleDestroy method is defined. This method is executed when the module containing the PrismaService is destroyed. Inside this method, the this.$disconnect() method is called. This disconnects the Prisma client from the database.

// By using this approach, you ensure that your Prisma client is connected when the module is initialized and disconnected when the module is destroyed. This helps manage database connections efficiently and prevents connection leaks.

// In your NestJS modules, you can inject the PrismaService and use its methods to interact with the database using Prisma's generated client methods.